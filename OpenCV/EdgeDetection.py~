#######################################################################
#In Progress:
#	1) Improve routine for iterating through series of parameters for
#	   image processing methods to ensure object captured
#
#TODO: 
#	1) Add additional support for command line arguments. Currently
#	   accepts filename. Need:
#			a) Directory path instead of filename (to work with TODO 4)
#			b) Output filename
#			c) Sleep time between image change
#			d) Others?
#	3) Investigate ways to close gaps in contours (necessary?)
#	4) Set up so script will run automatically until it has processed
#	   all images in a directory
########################################################################
import sys
import time
import cv2
import numpy as np
import cmath
from matplotlib import pyplot as plt

def perimeter(points):
	length = 0
	for element in points:
		for e in element:
			a = e[0]
			b = e[1]
			c = (a**2)+(b**2)
			c = c**0.5
			length = length + c
	return(length)

def edgeDetection(imageFilename,sleep=750,blur=15,low_start=1,high_start=2,low_end=500,high_end=1000):
	img = cv2.imread(imageFilename)
	while ( (low_start<low_end) and (high_start<high_end) ):
		img = cv2.imread(imageFilename)
		img = cv2.GaussianBlur(img,(blur,blur),0)
		img = cv2.Canny(img,40,80)
		cv2.imshow('image',img)
		key_pressed = cv2.waitKey(750)
		if (key_pressed == 10):
			return (img)
		low_start = low_start*2
		high_start = high_start*2
		blur = blur + 2
		cv2.destroyAllWindows()
	return(img)

def getContours(edges,sleep=750):
	f = open('contours.txt','w+')
	contours, hierarchy = cv2.findContours(edges,cv2.RETR_LIST,cv2.CHAIN_APPROX_NONE)
	areas = []
	for i in range(len(contours)):
		area = cv2.contourArea(contours[i])
		areas.append([area,i])
	areas.sort(key=lambda x: x[0],reverse=True)
	i = 0
	while (i< min(10,len(contours))):
		orig = cv2.imread('banana.jpg')
		area_key = areas[i]
		c = contours[area_key[1]]
		cv2.drawContours(orig, c, -1, (0,255,0), 3)
		cv2.imshow('image',orig)
		key_pressed = cv2.waitKey(sleep)
		if (key_pressed == 10):
			return(orig)
		i = i+1

def main(filename):
	edges = edgeDetection(filename)
	contour = getContours(edges)
		
filename = ''	
if (len(sys.argv)>1):
	filename = sys.argv[1]
else:
	filename = 'banana.jpg'
main(filename)
exit()
